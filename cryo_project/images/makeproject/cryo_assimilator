#!/usr/bin/env python3

import sys, os
from datetime import date
from shutil import copy
import numpy as np
import time

from tensorflow import keras
from tensorflow.keras.models import load_model # basic class for specifying and training a neural network

result_filename = 'result.txt'
prev_result_filename = 'prev_'+result_filename
iter_filename = 'iter_num.txt'
max_iter_filename = 'max_iter.txt'
result_dir = '/home/boincadm/project/tmp_models'
client_dir = '/home/boincadm/project/cryo-client'
bin_dir = '/home/boincadm/project/bin'
result_file_path = os.path.join(result_dir, result_filename)
prev_result_file_path = os.path.join(result_dir, prev_result_filename)
iter_path = os.path.join(result_dir, iter_filename)
max_iter_path = os.path.join(result_dir, max_iter_filename)
models_temp_dir = os.path.join(result_dir, 'models')
global_model_path = os.path.join(client_dir, 'src/global_tcnn2_crio_3.h5')
prev_global_model_path = os.path.join(result_dir, 'prev_tcnn2_crio_3.h5')

def creating_result():
	text_from_files = []
	text_files = os.listdir(models_temp_dir)
	for file in text_files:
		with open(os.path.join(models_temp_dir, file)) as f:
			text_from_files.append(f.read())

	result_file = ' '.join(text_from_files)

	if os.path.exists(result_file_path):
		copy(result_file_path, prev_result_file_path)
	with open(result_file_path, 'a') as f:
		f.write(result_file)

	os.system('rm -r {}'.format(os.path.join(models_temp_dir, '*')))

def global_model_update():
	iter_num = 0
	local_models = []
	models_filenames = os.listdir(models_temp_dir)

	global_model = load_model(global_model_path)
	gl_weights = np.array(global_model.get_weights())
	diff_weights = []

	with open(iter_path) as f:
		iter_num = int(f.read())


	if os.path.exists(global_model_path):
		os.rename(global_model_path, os.path.join(result_dir, str(iter_num)+'_prev_tcnn2_crio_3.h5'))

	for model_name in models_filenames:
		tmp_model = load_model(os.path.join(models_temp_dir, model_name))
		tmp_weights = np.array(tmp_model.get_weights())
		diff_weights.append(gl_weights - tmp_weights)
		del tmp_model

	global_model.set_weights( list( gl_weights - np.sum( np.array(diff_weights), axis=0 ) / len(diff_weights) ) )

	global_model.save(global_model_path)

	os.system('rm -r {}'.format(os.path.join(models_temp_dir, '*')))

def check_iters():
	iter_num = 0
	max_iter = 0

	with open(iter_path) as f:
		iter_num = int(f.read())

	with open(max_iter_path) as f:
		max_iter = int(f.read())

	return iter_num, max_iter

def save_prev_result():
	os.rename(result_file_path, prev_result_file_path)

def inc_iter(value):
	value += 1
	with open(iter_path, 'w') as f:
		f.write(str(value))
	return value

if len(sys.argv) > 1 and sys.argv[1]!='--error':

	iteration, max_iteration = check_iters()

	if iteration < max_iteration:
		# creating_result()
		global_model_update()
		cur_iter = inc_iter(iteration)
		print('Current iter = {}'.format(cur_iter))
		os.chdir(client_dir)
		os.system("docker build -t ozon67/cryo-client:test .")
		os.chdir("/home/boincadm/project")
		time.sleep(60)
		os.system("./work_unit_generator 10 15")

	else:
		global_model_update()
		print('Finish!!!')
	#TODO check for last iter and get metrics of final model
else:
	print("Error results!")
